File.Contents(Source)



-- Importing several tables as a single table
let
    Source = (B02Parameter1 as any) => let
        Source = B02Parameter1,
        #"Trimmed Text" = Table.TransformColumns(Source,{{"Column1", Text.Trim, type text}}),
        #"Promoted Headers" = Table.PromoteHeaders(#"Trimmed Text", [PromoteAllScalars=true]),
        #"Added Conditional Column" = Table.AddColumn(#"Promoted Headers", "SalesRep", each if [Total Per Product] = null then [#"SalesRep/Product"] else null),
        #"Added Conditional Column1" = Table.AddColumn(#"Added Conditional Column", "ProductColumn", each if [Total Per Product] = null then null else [#"SalesRep/Product"]),
        #"Filled Down" = Table.FillDown(#"Added Conditional Column1",{"SalesRep"}),
        #"Filtered Rows" = Table.SelectRows(#"Filled Down", each ([#"1/5/2020"] <> null)),
        #"Filtered Rows1" = Table.SelectRows(#"Filtered Rows", each not Text.Contains([#"SalesRep/Product"], "Totals")),
        #"Unpivoted Other Columns" = Table.UnpivotOtherColumns(#"Filtered Rows1", {"SalesRep", "ProductColumn"}, "Attribute", "Value")
    in
        #"Unpivoted Other Columns"
in
    Source






-- Importing CSV files
let
    Source = Folder.Files("D:\backup of downloads\misc laptop\Practice\DAX and power Query\extracttion\29\Import-01-TxtCvsFiles\01StartFiles"),
    #"Filtered Rows" = Table.SelectRows(Source, each ([Extension] = ".csv")),
    #"Removed Other Columns" = Table.SelectColumns(#"Filtered Rows",{"Content"}),
    #"Filtered Hidden Files1" = Table.SelectRows(#"Removed Other Columns", each [Attributes]?[Hidden]? <> true),
    #"Invoke Custom Function1" = Table.AddColumn(#"Filtered Hidden Files1", "Transform File", each #"Transform File"([Content])),
    #"Removed Other Columns1" = Table.SelectColumns(#"Invoke Custom Function1", {"Transform File"}),
    #"Expanded Table Column1" = Table.ExpandTableColumn(#"Removed Other Columns1", "Transform File", Table.ColumnNames(#"Transform File"(#"Sample File"))),
    #"Changed Type" = Table.TransformColumnTypes(#"Expanded Table Column1",{{"City", type text}, {"Date", type date}, {"Sales", Currency.Type}, {"StoreID", Int64.Type}}),
    #"Filtered Rows1" = Table.SelectRows(#"Changed Type", each true)
in
    #"Filtered Rows1"



--Importing Files from folder

let
    Source = Folder.Files("D:\backup of downloads\misc laptop\Practice\DAX and power Query\extracttion\32\Import-03-ExcelFilesMultipleSheetsEach"),
    #"Removed Other Columns" = Table.SelectColumns(Source,{"Content", "Name"}),
    #"Added Custom" = Table.AddColumn(#"Removed Other Columns", "Custom", each Excel.Workbook([Content])),
    #"Replaced Value" = Table.ReplaceValue(#"Added Custom",".xlsx","",Replacer.ReplaceText,{"Name"}),
    #"Removed Columns" = Table.RemoveColumns(#"Replaced Value",{"Content"}),
    #"Expanded Custom" = Table.ExpandTableColumn(#"Removed Columns", "Custom", {"Name", "Data", "Item", "Kind", "Hidden"}, {"Custom.Name", "Custom.Data", "Custom.Item", "Custom.Kind", "Custom.Hidden"}),
    #"Filtered Rows" = Table.SelectRows(#"Expanded Custom", each ([Custom.Kind] = "Sheet")),
    #"Filtered Rows1" = Table.SelectRows(#"Filtered Rows", each not Text.Contains([Custom.Item], "Sheet")),
    #"Expanded Custom.Data" = Table.ExpandTableColumn(#"Filtered Rows1", "Custom.Data", {"Column1", "Column2", "Column3"}, {"Custom.Data.Column1", "Custom.Data.Column2", "Custom.Data.Column3"}),
    #"Promoted Headers" = Table.PromoteHeaders(#"Expanded Custom.Data", [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"GrainvilleStore", type text}, {"Gardenia", type text}, {"Date", type date}, {"Product", type text}, {"Sales", Int64.Type}, {"Gardenia_1", type text}, {"Sheet", type text}, {"false", type logical}})
in
    #"Changed Type"


--Importing tables from folder

let
    Source = Folder.Files("D:\backup of downloads\misc laptop\Practice\DAX and power Query\extracttion\33\Import-04-ExcelNotProperDataSets\SurveyByDepartment"),
    #"Removed Other Columns" = Table.SelectColumns(Source,{"Content"}),
    #"Added Custom" = Table.AddColumn(#"Removed Other Columns", "Custom", each Excel.Workbook([Content])),
    #"Expanded Custom" = Table.ExpandTableColumn(#"Added Custom", "Custom", {"Name", "Data", "Item", "Kind"}, {"Custom.Name", "Custom.Data", "Custom.Item", "Custom.Kind"}),
    #"Expanded Custom.Data" = Table.ExpandTableColumn(#"Expanded Custom", "Custom.Data", {"Column1", "Column2", "Column3"}, {"Custom.Data.Column1", "Custom.Data.Column2", "Custom.Data.Column3"}),
    #"Removed Columns" = Table.RemoveColumns(#"Expanded Custom.Data",{"Content"})
in
    #"Removed Columns"


--Custom function

(Input) =>
let
 #"Changed Type" = Table.TransformColumnTypes(Input,{{"Column1", type text}, {"Column2", type any}, {"Column3", type any}, {"Column4", type any}, {"Column5", type any}, {"Column6", type any}, {"Column7", type any}, {"Column8", type any}, {"Column9", type any}, {"Column10", type any}, {"Column11", type any}, {"Column12", type any}, {"Column13", type any}, {"Column14", type any}, {"Column15", type any}, {"Column16", type any}, {"Column17", type any}, {"Column18", type any}, {"Column19", type any}, {"Column20", type any}, {"Column21", type any}, {"Column22", type any}, {"Column23", type any}, {"Column24", type any}, {"Column25", type any}, {"Column26", type any}, {"Column27", type any}, {"Column28", type any}, {"Column29", type any}, {"Column30", type any}, {"Column31", type any}, {"Column32", type any}})
in
    #"Changed Type"


-- Dynamic splits and count

Table.AddColumn(Source, "Custom", each List.Count(Splitter.SplitTextByCharacterTransition({" "}, {"A".."Z"})([Text])))
List.Max(#"Added Custom"[Custom])
Table.SplitColumn(Source, "Text", Splitter.SplitTextByCharacterTransition({" "}, {"A".."Z"}), Custom1)


-- Importing data as tables by removing unwanted columns
= File.Contents(Excel.CurrentWorkbook(){[Name="FilePath"]}[Content]{0}[Column1])
Table.AddColumn(#"Filtered Rows", "Custom", (t) => Table.SelectColumns(t[Data],List.Select(Table.ColumnNames(t[Data]), (cn) => not Text.StartsWith(cn, "Column"))))
Table.Combine(#"Added Custom"[Custom])

--re ordering the above
= File.Contents(Excel.CurrentWorkbook(){[Name="FilePath"]}[Content]{0}[Column1])
-First step
Table.AddColumn(#"Filtered Rows", "Custom", (t) => List.Select(Table.ColumnNames(t[Data]), (c) => not Text.StartsWith(c,"Column")))
-Second step
Table.AddColumn(#"Filtered Rows", "Custom", (t) => Table.SelectColumns(t[Data], List.Select(Table.ColumnNames(t[Data]), (cn) => not Text.StartsWith(cn,"Column"))))

--another varianion, by ignoring column1
 Table.AddColumn(#"Filtered Rows", "Custom", (t) => List.Select(Table.ColumnNames(t[Data]), (c) => not Text.StartsWith(c, "Column1")))


--better and final (Importing data as tables by removing unwanted columns)
File.Contents(Excel.CurrentWorkbook(){[Name="FilePath"]}[Content]{0}[Column1])
 Excel.Workbook(FilePath, true) -- (true argument really differentiates between successful application and otherwise)
Table.AddColumn(#"Filtered Rows", "Custom", (t) => Table.SelectColumns(t[Data],List.Select(Table.ColumnNames(t[Data]), (c) => not Text.StartsWith(c,"Column"))))




-- filtering table with just column/list
= Table.TransformColumnTypes(Source,{{"Column1", type text}}){0}[Column1]
Table.SelectRows(#"Changed Type", each not Text.Contains([Country], "xxx"))
Table.SelectRows(#"Changed Type", each Text.Contains(Table3, [Country]))

--extracion by matching lists (Not NOT is fully capitalized)
Excel.CurrentWorkbook(){[Name="NotCriteria"]}[Content][NOTCriteria]
List.Buffer(Source)
Table.AddColumn(#"Changed Type", "Custom", each List.Intersect({Text.Split([Product_Name]," "),NotCriteria})) (have to remove "Custom")
Table.SelectRows(#"Changed Type", each List.IsEmpty(List.Intersect({Text.Split([Product_Name]," "),NotCriteria})))

--Another Method
Splitter.SplitTextByAnyDelimiter(NotCriteria)
= Table.AddColumn(#"Changed Type", "Custom", each Splitter.SplitTextByAnyDelimiter(NotCriteria)([Product_Name]))
Table.AddColumn(#"Changed Type", "Custom", each List.Count(Splitter.SplitTextByAnyDelimiter(NotCriteria)([Product_Name]))=1)
Table.SelectRows(#"Changed Type", each List.Count(Splitter.SplitTextByAnyDelimiter(NotCriteria)([Product_Name]))=1)


Table.AddColumn(#"AddedIndex", "Custom", each AddedIndex{[Index]}[GE Close]) (Note {} is outside of [])


-- Approximate Match (unpivoting and changing data type)
let
    Source = Excel.CurrentWorkbook(){[Name="ProductsUnitsPrice"]}[Content],
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"ProductID", type text}, {"Product/Quantity", type text}, {"0", type number}, {"2", type number}, {"4", type number}}),
    #"Unpivoted Columns" = Table.UnpivotOtherColumns(#"Changed Type", {"ProductID", "Product/Quantity"}, "Attribute", "Value"),
    #"Renamed Columns" = Table.RenameColumns(#"Unpivoted Columns",{{"Value", "Price"}, {"Attribute", "Units"}, {"Product/Quantity", "Quantity"}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Renamed Columns",{{"Units", Int64.Type}})
in
    #"Changed Type1"

-- then next step (due to approximate match use of OT and OT with Table.SelectRows)
Table.AddColumn(#"Merged Queries", "Custom", (OT) => List.Last(Table.SelectRows(OT[ProductsUnitsPrice], (IT) => IT[Units]<=OT[Units])[Price]))

--OR
let
    Source = Excel.CurrentWorkbook(){[Name="f2ndUnits"]}[Content],
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"ProductID", type text}, {"Units", Int64.Type}}),
    #"Merged Queries" = Table.NestedJoin(#"Changed Type", {"ProductID"}, ProductsUnitsPrice, {"ProductID"}, "ProductsUnitsPrice", JoinKind.LeftOuter),
    #"Added Custom" = Table.AddColumn(#"Merged Queries", "Custom", (OT) => List.Last(Table.SelectRows(OT[ProductsUnitsPrice], (IT) => IT[Units]<=OT[Units])[Price]))
in


-- Buffer Table and running count
(Trick in this code is "(IT) => IT[Transaction No] <= OT[Transaction No]" cancelling effect because of buffer (table that can create count))
let
    Source = Excel.CurrentWorkbook(){[Name="ProductStartTable"]}[Content],
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Transaction No", Int64.Type}, {"Product", type text}}),
    #"Sorted Rows" = Table.Sort(#"Changed Type",{{"Transaction No", Order.Ascending}}),
    Custom1 = Table.Buffer(#"Sorted Rows"),
    #"Added Custom" = Table.AddColumn(Custom1, "Custom", (OT) => Table.RowCount(Table.SelectRows(Custom1, (IT) => IT[Transaction No] <= OT[Transaction No] and IT[Product] = OT[Product])))
in
    #"Added Custom"
    



-- Combining Text in a single cell (trick is to watch closely where code is added inside bracket)
let
    Source = Excel.CurrentWorkbook(){[Name="Invoices"]}[Content],
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Vendor", Int64.Type}, {"Invoice", Int64.Type}, {"Reference", Int64.Type}}),
    #"Grouped Rows" = Table.Group(Source, {"Vendor", "Invoice"}, {{"Reference", each Text.Combine(List.Transform(List.Distinct([Reference]), Text.From), ", ")}})
in
    #"Grouped Rows"


--Table.Max Function with an additional argument required
let
    Source = Excel.CurrentWorkbook(){[Name="Sales"]}[Content],
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Date", type datetime}, {"Product", type text}, {"Sales Rep", type text}, {"Units Sold", Int64.Type}}),
    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"Date"}),
    #"Grouped Rows" = Table.Group(#"Removed Columns", {"Product"}, {{"Count", each List.Sum([Units Sold]), type nullable number}, {"Records", each _, type table [Product=nullable text, Sales Rep=nullable text, Units Sold=nullable number]}}),
    #"Added Custom" = Table.AddColumn(#"Grouped Rows", "Custom", each Table.Max([Records],"Units Sold")),
    #"Expanded Custom" = Table.ExpandRecordColumn(#"Added Custom", "Custom", {"Sales Rep", "Units Sold"}, {"Custom.Sales Rep", "Custom.Units Sold"})
in
    #"Expanded Custom"
